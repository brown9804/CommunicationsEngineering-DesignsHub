#!/usr/bin/
# -*- coding: utf-8 -*-

# #--------------------------------main  file------------------------------------
# #
# # Copyright (C) 2020 by
# # Belinda Brown RamÃ­rez (timna.brown@ucr.ac.cr)
# #                  B
# #                      &
# #                           B
# # Brandon Esquivel (brandon.esquivel@ucr.ac.cr)
# #
# #-----------------------------------------------------------------------------


# Simulation of source encoding with channel encoding
# Image Source

# ******************************************************
#               IMPORTS
# ******************************************************
import sys
sys.path.append("./includes/")
from get_source import *


# ******************************************************
#               FUNCTIONS
# ******************************************************
# ### Using an example image
img_direction = './inputs/input0.jpg'
#### Open RGB image - convert to gray
gray_img = get_Data(img_direction)
### Gray image to Binary
binary_img_DATA = binary_inv_threshold(gray_img,"./results/")
###### Read all values from dataBase
complete_bits, bits_high, bits_low, total_counter, low_counter, high_counter = analize_source_data(binary_img_DATA)
############################################################
############                        1
############################################################
print("\n")
print("***********************************************************************")
print("		Verification 			Stage	")
print("***********************************************************************")
print("\nTOTAL of pixels: 					", total_counter )
print("\nThe amount of pixel in HIGH value: 					", high_counter )
print("\nThe amount of pixel in LOW value: 					", low_counter )
print("\n-----------------------------------------------")
print("Verification ------->      DONE ")
print("-----------------------------------------------\n")

############################################################
############                        2
############################################################
print("\n")
print("***********************************************************************")
print("		Packaging 			Stage	")
print("***********************************************************************")
print("\n")
n_bit = 7
pkg_data = packaging(complete_bits, n_bit) # 186833x7
# print(pkg_data)
print("\n-----------------------------------------------")
print("Packaging ------->      DONE ")
print("-----------------------------------------------\n")

############################################################
############                        3
############################################################
print("\n")
print("***********************************************************************")
print("		Creating Generator Matrix 	Stage	")
print("***********************************************************************")
print("\n")
g_matrix = creating_G(pkg_data, n_bit) # 186833x7
print("\n-----------------------------------------------")
print("Create Generator Matrix ------->      DONE ")
print("-----------------------------------------------\n")

############################################################
############                        4
############################################################
print("\n")
print("***********************************************************************")
print("		Packages * Generator Matrix  = u	Stage	")
print("***********************************************************************")
print("\n")
result_u = pack_X_genM(pkg_data, g_matrix, n_bit) # 186833 x 14
print("\n-----------------------------------------------")
print("Packages * Generator Matrix  = u ------->      DONE ")
print("-----------------------------------------------\n")

############################################################
############                        5
############################################################
print("\n")
print("***********************************************************************")
print("		V =  U + Noise 	Stage	")
print("***********************************************************************")
print("\n")
err_porc = 10
v_uNoise = noise(result_u, err_porc, n_bit) # 186833 x 14
print("\n-----------------------------------------------")
print("U + Noise ------->      DONE ")
print("-----------------------------------------------\n")


###########################################################
############                        6
############################################################
print("\n")
print("***********************************************************************")
print("		Sindrome	Stage	")
print("***********************************************************************")
print("\n")
sindromeMatrix, sindr0c, sindr1c, okC =  sindrome(pkg_data, v_uNoise, n_bit)
print("\n-----------------------------------------------")
print("Sindrome ------->      DONE ")
print("-----------------------------------------------\n")



############################################################
############                        8
############################################################
print("\n")
print("***********************************************************************")
print("		Fixing Error	Stage	")
print("***********************************************************************")
print("\n")
final_ReceivedData = fixing_err(pkg_data, sindromeMatrix, n_bit, sindr0c, sindr1c, okC)
print("\n-----------------------------------------------")
print("Fixing Error ------->      DONE ")
print("-----------------------------------------------\n")



# ############################################################
# ############                        FINAL
# ############################################################
print("\n")
inverted_rgb_img= BINARY_RGB(gray_img, "./results/")
